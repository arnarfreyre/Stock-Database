# SuperClaude v4 Personas & Functions Guide

## 🚀 Quick Reference

How to call personas
--persona-(persona)

for instance

--persona-python-expert
--persona-refactoring-expert

### Technical Specialists (Agent Tools)
@agent-python-expert         - Production Python with SOLID principles
@agent-system-architect      - Scalable architecture & maintainability
@agent-backend-architect     - APIs with fault tolerance & security
@agent-frontend-architect    - Accessible, performant UIs
@agent-security-engineer     - Vulnerability detection & compliance
@agent-performance-engineer  - Optimization through measurement

### Quality & Process Experts (Agent Tools)
@agent-refactoring-expert    - Clean code & technical debt reduction
@agent-quality-engineer      - Comprehensive testing & edge cases
@agent-devops-architect      - Infrastructure automation & reliability
@agent-root-cause-analyst    - Evidence-based problem investigation
@agent-requirements-analyst  - Requirement discovery from ambiguity

### Knowledge & Guidance (Agent Tools)  
@agent-learning-guide        - Progressive teaching through examples
@agent-socratic-mentor       - Discovery learning via questioning
@agent-technical-writer      - Clear, audience-tailored documentation
@agent-general-purpose       - General-purpose agent for researching complex questions

### Behavioral Modes
    Flag	                          When Activated	                              What It Does
--brainstorm	            Vague requests, exploration keywords	    Collaborative discovery mindset
--introspect	            Self-analysis, error recovery	            Expose reasoning process with transparency
--task-manage	            >3 steps, complex scope	Orchestrate through delegation
--orchestrate	            Multi-tool operations, performance needs	Optimize tool selection and parallel execution
--token-efficient / --uc	Context >75%, efficiency needs	            Symbol-enhanced communication, 30-50% reduction

Core Analysis Flags 🎯
Flag	           When Activated	                                        What It Does
--think	        5+ files OR complex analysis	                Standard structured analysis (~4K tokens)
--think-hard	Architectural analysis, system dependencies	    Deep analysis (~10K tokens) with enhanced tools
--ultrathink	Critical system redesign, legacy modernization	Maximum depth analysis (~32K tokens) with all tools











### Execution Control
- **--delegate [auto|files|folders]** - Parallel sub-agent processing (>7 dirs OR >50 files)
- **--concurrency [n]** - Control concurrent operations (1-15)
- **--loop** - Iterative improvement cycles
- **--iterations [n]** - Set improvement cycles (1-10)
- **--validate** - Pre-execution risk assessment
- **--safe-mode** - Maximum validation, conservative execution

### Output Optimization
- **--uc / --ultracompressed** - Symbol system, 30-50% token reduction
- **--scope [file|module|project|system]** - Define analysis boundary
- **--focus [performance|security|quality|architecture|accessibility|testing]** - Domain targeting

## 📋 Available Agent Personas

### Technical Specialists (Task Agent Tools)

**python-expert**
- Production-ready Python with SOLID principles
- Focus: Security, performance, modern best practices
- Tools: Read, Write, Edit, MultiEdit, Bash, Grep
- Best for: Python development, refactoring, optimization

**system-architect**  
- Scalable system design & architecture
- Focus: Maintainability, long-term technical decisions
- Tools: Read, Grep, Glob, Write, Bash
- Best for: System design, architecture planning, tech stack decisions

**frontend-architect**
- Accessible, performant user interfaces
- Focus: UX, modern frameworks, responsiveness
- Tools: Read, Write, Edit, MultiEdit, Bash
- Best for: React/Vue/Angular components, UI optimization

**backend-architect**
- Reliable backend with fault tolerance
- Focus: Data integrity, security, scalability
- Tools: Read, Write, Edit, MultiEdit, Bash, Grep  
- Best for: APIs, microservices, database design

**security-engineer**
- Vulnerability detection & compliance
- Focus: Security standards, threat assessment
- Tools: Read, Grep, Glob, Bash, Write
- Best for: Security audits, vulnerability fixes, compliance

**performance-engineer**
- Measurement-driven optimization
- Focus: Bottleneck elimination, metrics
- Tools: Read, Grep, Glob, Bash, Write
- Best for: Performance tuning, profiling, optimization

### Process & Quality Experts (Task Agent Tools)

**refactoring-expert**
- Systematic refactoring & clean code
- Focus: Technical debt reduction, SOLID principles
- Tools: Read, Edit, MultiEdit, Grep, Write, Bash
- Best for: Code cleanup, pattern improvement, maintainability

**quality-engineer**
- Comprehensive testing & edge cases
- Focus: Test coverage, systematic validation
- Tools: Read, Write, Bash, Grep
- Best for: Test design, edge case detection, quality assurance

**devops-architect**
- Infrastructure automation & deployment
- Focus: Reliability, observability, CI/CD
- Tools: Read, Write, Edit, Bash
- Best for: Docker, Kubernetes, deployment pipelines

**root-cause-analyst**
- Evidence-based problem investigation
- Focus: Hypothesis testing, systematic debugging
- Tools: Read, Grep, Glob, Bash, Write
- Best for: Complex bug analysis, performance issues

**requirements-analyst**
- Requirement discovery from ambiguity
- Focus: Structured analysis, specification creation
- Tools: Read, Write, Edit, TodoWrite, Grep, Bash
- Best for: Project planning, requirement clarification

### Knowledge & Communication (Task Agent Tools)

**learning-guide**
- Progressive teaching through examples
- Focus: Practical understanding, hands-on learning
- Tools: Read, Write, Grep, Bash
- Best for: Tutorials, code explanation, concept teaching

**socratic-mentor**
- Discovery learning via strategic questioning
- Focus: Deep understanding through guided exploration
- Tools: Read, Write, Grep, Bash
- Best for: Complex concepts, problem-solving skills

**technical-writer**
- Clear, audience-tailored documentation
- Focus: Usability, accessibility, comprehensive docs
- Tools: Read, Write, Edit, Bash
- Best for: API docs, user guides, technical manuals

## 🔧 MCP Server Control Flags

**--c7 / --context7**
- Library documentation & pattern guidance
- Trigger: Library imports, framework questions
- Best for: Official docs, best practices

**--seq / --sequential**
- Structured multi-step reasoning
- Trigger: Complex debugging, system design
- Best for: Hypothesis testing, analysis

**--magic**
- Modern UI generation from 21st.dev
- Trigger: /ui, /21, /21st commands, component requests
- Best for: React/Vue components, design systems

**--morph / --morphllm**
- Efficient multi-file pattern application
- Trigger: Bulk transformations, style enforcement
- Best for: Codebase-wide refactoring

**--serena**
- Semantic understanding & session memory
- Trigger: Symbol operations, large codebases
- Best for: Project navigation, persistent context

**--play / --playwright**
- Real browser automation & testing
- Trigger: E2E scenarios, visual validation
- Best for: Integration testing, accessibility

**--all-mcp** - Enable all MCP servers for maximum capability
**--no-mcp** - Native tools only, performance priority

## 💡 Symbol System (--uc / --ultracompressed)

### Technical Domains
- `⚡` Performance | `🔍` Analysis | `🔧` Configuration
- `🛡️` Security | `📦` Deployment | `🎨` Design | `🏗️` Architecture

## 📝 Usage Examples

### Agent Tool Activation
```bash
# Use Task tool to launch specialized agents
"Refactor this Python module" → python-expert agent
"Design system architecture" → system-architect agent  
"Find root cause of bug" → root-cause-analyst agent
```

### Combined Flags
```bash
--think-hard --c7          # Deep analysis with documentation
--delegate auto --concurrency 10  # Parallel processing
--uc --safe-mode          # Compressed output, maximum safety
--loop --iterations 5     # 5 improvement cycles
```

### Auto-Activation Examples
```
"Help me optimize this React component" 
→ Auto: frontend-architect + magic + performance-engineer

"Debug this API endpoint error"
→ Auto: root-cause-analyst + backend-architect + --seq

"Write documentation for this feature"
→ Auto: technical-writer + learning-guide
```

## 🚀 Key Behavioral Rules (v4)

### 🔴 CRITICAL (Never Compromise)
- `git status && git branch` before starting
- Read before Write/Edit operations
- Feature branches only, never main/master
- Root cause analysis, never skip validation
- Absolute paths, no auto-commit

### 🟡 IMPORTANT (Strong Preference)
- TodoWrite for >3 step tasks
- Complete all started implementations (no TODOs/stubs)
- Build only what's asked (MVP first)
- Professional language (no marketing superlatives)
- Clean workspace (remove temp files)

### 🟢 RECOMMENDED (Apply When Practical)
- Parallel operations over sequential
- Best tool selection (MCP > Native > Basic)
- Batch operations when possible
- Descriptive naming conventions

## 🎯 Tips & Best Practices

1. **Agent tools auto-activate** - Keywords trigger appropriate specialists
2. **Parallel by default** - Use batch tool calls for independent operations  
3. **Task management** - TodoWrite tracks multi-step operations with memory
4. **Token efficiency** - Use --uc for large codebases (30-50% reduction)
5. **Safety gates** - --validate and --safe-mode prevent risky operations
6. **Evidence-based** - All claims must be verifiable through testing/docs
7. **Session lifecycle** - Load → Work → Checkpoint (30min) → Save
8. **Tool optimization** - MultiEdit > multiple Edits, Grep > bash grep
9. **File organization** - claudedocs/ for reports, tests/ for testing
10. **Temporal awareness** - Always check <env> for current date

## 📊 Priority & Decision Trees

### Before Any Operation
```
Operation needed?
├─ >3 steps? → TodoWrite required
├─ Multiple files? → Parallel processing
├─ Risk >0.7? → --validate flag
└─ Production? → --safe-mode
```

### Tool Selection Matrix
```
Task → Best approach:
├─ Python code → python-expert agent
├─ UI component → Magic MCP (/ui, /21)
├─ Complex debug → root-cause-analyst + --seq
├─ Multi-file edit → MultiEdit or morphllm
├─ Documentation → Context7 MCP
└─ Browser test → Playwright MCP
```

## 🔄 Session Commands

- `/sc:load` - Initialize session with memory
- `/sc:save` - Save session state
- `/sc:checkpoint` - Create restore point
- `/ui` or `/21` - Generate UI components
- `/logo <company>` - Fetch company logos